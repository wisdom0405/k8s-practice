apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: seulki
spec:
  replicas: 2 
  selector: 
    matchLabels:
        app: my-nginx
  template: # template : pod 정의
    metadata:
      labels: 
        app: my-nginx
    spec:
      containers:
        - name: nginx
          image: nginx
          ports: 
          - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: seulki
spec: 
# ingress를 적용하기 위해 ClusterIp로 변경
  type: ClusterIP
  ports: 
  - name: http
    port: 80
    targetPort: 80
  selector:
    app: my-nginx # Pod의 labels.app은 service의 selector.app의 이름과 싱크가 맞아야한다.

---
# 쿠버네티스에서 https 인증서 적용 절차
# 1. cert-manager 생성
  # 1-1. cert-manager 생성을 위한 cert-manager namespace 생성 : kubectl create namespace cert-manager
  # 1-2. helm 패키지 매니저 설치 : 구글 검색 후 다운로드 후 로컬에 설치
  # 1-3. helm repository 추가 : helm repo add jetstack https://charts.jetstack.io
  # 1-4. helm repository update : helm repo update
  # 1-5. helm을 통해 cert-manager 설치 : helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.5.0 --set installCRDs=true

# 2. ClusterIssuer 생성
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: seulki
spec:
  acme:
  # 인증서 서버 주소. 해당 서버의 리소스를 통해 인증서 발행
    server: https://acme-v02.api.letsencrypt.org/directory
    email: wisdom0405@kakao.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
---
# 3. Certificate 생성
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: wisdom0405-com-tls # 이름아무거나 가능
  namespace: seulki
spec:
  secretName: wisdom0405-com-tls
  duration: 2160h #90일
  renewBefore: 360h #15일 전에 갱신
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: server.wisdom0405.shop #도메인명
  dnsNames:
  - server.wisdom0405.shop #도메인명

---
# ingress-controller 설치는 별도 필요
# ingress-controller도 nginx기반으로 구성돼있음
# ingress-controller를 설치시에 alb가 생성되고, ingress 자원과 함께 서비스 라우팅 수행
# ingress-controller 1개에서 여러개의 ingress로 라우팅
# kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/aws/deploy.yaml
# aws eks update-kubeconfig --region ap-northeast-2 --name 6team-cluster

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-nginx-ingress
  namespace: seulki
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1 # 첫번째 prefix 제거 후 endpoint 전달
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - "server.wisdom0405.shop" # 도메인명
    secretName: wisdom0405-com-tls # Certificate의 secertName 동일하게 지정
  rules:
    - host: server.wisdom0405.shop
      http:
        paths:
          - path: /product-service/(.*)
            pathType: Prefix
            backend:
              service:
                name: nginx-service
                port: 
                  number: 80

          - path: /order-service/(.*)
            pathType: Prefix
            backend:
              service:
                name: nginx-service
                port: 
                  number: 80

