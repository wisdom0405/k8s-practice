apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 2 
  selector: 
    matchLabels:
        app: my-nginx
  template: # template : pod 정의
    metadata:
      labels: 
        app: my-nginx
    spec:
      containers:
        - name: nginx
          image: nginx
          ports: 
          - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec: 
# ingress를 적용하기 위해 ClusterIp로 변경
  type: ClusterIP
  ports: 
  - name: http
    port: 80
    targetPort: 80
  selector:
    app: my-nginx # Pod의 labels.app은 service의 selector.app의 이름과 싱크가 맞아야한다.

---
# ingress-controller 설치는 별도 필요
# ingress-controller도 nginx기반으로 구성돼있음
# ingress-controller를 설치시에 alb가 생성되고, ingress 자원과 함께 서비스 라우팅 수행
# kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/aws/deploy.yaml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-nginx-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1 # 첫번째 prefix 제거 후 endpoint 전달
spec:
  rules:
    - host: server.wisdom0405.shop
      http:
        paths:
          - path: /product-service/(.*)
            pathType: Prefix
            backend:
              service:
                name: nginx-service
                port: 
                  number: 80

          - path: /order-service/(.*)
            pathType: Prefix
            backend:
              service:
                name: nginx-service
                port: 
                  number: 80

